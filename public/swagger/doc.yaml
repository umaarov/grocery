openapi: 3.0.0
info:
  title: Grocery API
  version: 1.0.0
servers:
  - url: api

tags:
  - name: Authentication
    description: User authentication and management
  - name: Products
    description: Operations related to products
  - name: Categories
    description: Operations related to product categories

paths:
  /register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - first_name
                - email
                - password
                - password_confirmation
              properties:
                first_name:
                  type: string
                  example: Cristiano
                  description: First name.
                last_name:
                  type: string
                  example: Messi
                  description: Last name (optional).
                email:
                  type: string
                  format: email
                  example: user@gmail.com
                  description: Email address.
                password:
                  type: string
                  format: password
                  minLength: 8
                  example: 'password123'
                  description: Password (min 8 characters).
                password_confirmation:
                  type: string
                  format: password
                  example: 'password123'
                  description: Password Confirmation.
                profile_picture:
                  type: string
                  format: binary
                  description: Optional user profile picture (jpg, png, gif, webp, max 2MB). If not provided, an initial avatar will be generated.
      responses:
        '201':
          description: Registration successful. Verification email sent.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Registration successful! Please check your email to verify your account.
                  user:
                    $ref: '#/components/schemas/User'
        '422':
          description: Validation Error (e.g., email taken, password too short)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '500':
          description: Internal Server Error during registration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'

  /login:
    post:
      tags:
        - Authentication
      summary: Log in a user
      description: Authenticates a user and returns a Sanctum API token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - device_name
              properties:
                email:
                  type: string
                  format: email
                  example: user@gmail.com
                password:
                  type: string
                  format: password
                  example: 'password123'
                device_name:
                  type: string
                  example: 'my device'
                  description: A name for the token, identifying the device/client.
      responses:
        '200':
          description: Login Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logged in successfully!
                  user:
                    $ref: '#/components/schemas/User'
                  token_type:
                    type: string
                    example: Bearer
                  access_token:
                    type: string
                    example: '1|xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'
        '401':
          description: Invalid login credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMessage'
                example:
                  message: Invalid login credentials.
        '403':
          description: Email not verified.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMessage'
                example:
                  message: Email not verified. Please check your email.
        '422':
          description: Validation Error (e.g., missing fields)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '500':
          description: Internal Server Error during login.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'

  /email/verify/{id}/{token}:
    get:
      tags:
        - Authentication
      summary: Verify user email address
      description: Verifies user email using the ID and token from the verification link. Requires signed URL parameters (`expires`, `signature`).
      parameters:
        - name: id
          in: path
          required: true
          description: The user ID.
          schema:
            type: integer
            example: 1
        - name: token
          in: path
          required: true
          description: The email verification token.
          schema:
            type: string
            example: 'a1b2c3d4e5f6...'
        - name: expires
          in: query
          required: true # Note: This parameter is part of Laravel's signed URL feature and might not need to be explicitly sent by the client if they use the full URL from the email.
          description: Expiration timestamp (added by Laravel's signed URL feature).
          schema:
            type: integer
            example: 1678886400
        - name: signature
          in: query
          required: true # Note: This parameter is part of Laravel's signed URL feature.
          description: Signature hash (added by Laravel's signed URL feature).
          schema:
            type: string
            example: 'abcdef123456...'
      responses:
        '200':
          description: Email verified successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMessage'
                example:
                  message: Email verified successfully! You can now log in.
        '400':
          description: Email already verified or invalid token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMessage'
                examples:
                  already_verified:
                    value: { message: 'Email already verified.' }
                  invalid_token:
                    value: { message: 'Invalid verification token.' }
        '401':
          description: Invalid or expired verification link (signature mismatch).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMessage'
                example:
                  message: Invalid or expired verification link.
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMessage'
                example:
                  message: User not found.

  /auth/google/redirect:
    get:
      tags:
        - Authentication
      summary: Get Google OAuth redirect URL
      description: Returns the URL to redirect the user to for Google authentication.
      responses:
        '200':
          description: Google redirect URL provided successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  redirect_url:
                    type: string
                    format: url
                    example: 'https://accounts.google.com/o/oauth2/auth?client_id=...'
        '500':
          description: Failed to generate Google redirect URL.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMessage'
                example:
                  message: Google authentication failed. Please try again.

  /auth/google/callback:
    get:
      tags:
        - Authentication
      summary: Handle Google OAuth callback
      description: Handles the callback from Google after user authentication. **Note:** This endpoint is typically not called directly by API clients, but by the user's browser after redirecting from Google. It then redirects the browser again to the frontend application.
      parameters:
        - name: code
          in: query
          required: true
          description: The authorization code provided by Google.
          schema:
            type: string
        - name: state
          in: query
          description: The state parameter if provided in the initial redirect (though 'stateless' is used here).
          schema:
            type: string
      responses:
        '302':
          description: Redirect to Frontend. The browser is redirected to your frontend URL (`config('app.frontend_url')`) with token and user info in the URL fragment (`#token=...&user=...`) on success, or to `/auth/error?message=...` on failure. **No JSON body is returned.**
        '500':
          description: Internal Server Error during Google callback processing. The user is redirected to the frontend error page. **No JSON body is returned.**

  /logout:
    post:
      tags:
        - Authentication
      summary: Log out the current user
      description: Invalidates the current user's API token (the one used for the request).
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Logout successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMessage'
                example:
                  message: Logged out successfully!
        '401':
          description: Unauthenticated (no valid token provided).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMessage'
                example:
                  message: Unauthenticated.
        '500':
          description: Internal Server Error during logout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMessage'
                example:
                  message: Logout failed. Please try again.

  /email/resend:
    post:
      tags:
        - Authentication
      summary: Resend email verification link
      description: Sends a new verification email to the authenticated user if their email is not yet verified.
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Verification email sent successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMessage'
                example:
                  message: Verification link sent! Please check your email.
        '400':
          description: Email is already verified.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMessage'
                example:
                  message: Email already verified.
        '401':
          description: Unauthenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMessage'
                example:
                  message: Unauthenticated.
        '500':
          description: Failed to send verification email.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMessage'
                example:
                  message: Failed to send verification email. Please try again later.

  /user:
    get:
      tags:
        - Authentication
      summary: Get authenticated user details
      description: Retrieves the details of the currently authenticated user.
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: User data retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User data retrieved successfully.
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMessage'
                example:
                  message: Unauthenticated.
        '404':
          description: User not found (should be rare if authenticated).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMessage'
                example:
                  message: User not found.
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'

  /products:
    get:
      tags:
        - Products
      summary: List products
      description: Retrieve a paginated list of products. Supports filtering, sorting, and searching.
      parameters:
        - name: category_id
          in: query
          description: Filter products by category ID.
          schema:
            type: integer
            example: 1
        - name: featured
          in: query
          description: Filter for featured products.
          schema:
            type: boolean
            example: true
        - name: new
          in: query
          description: Filter for new products.
          schema:
            type: boolean
            example: true
        - name: organic
          in: query
          description: Filter for organic products.
          schema:
            type: boolean
            example: true
        - name: min_price
          in: query
          description: Filter by minimum price.
          schema:
            type: number
            format: double
            example: 10.50
        - name: max_price
          in: query
          description: Filter by maximum price.
          schema:
            type: number
            format: double
            example: 50.00
        - name: search
          in: query
          description: Search term for product name or description.
          schema:
            type: string
            example: "apple"
        - name: sort_by
          in: query
          description: Field to sort by.
          schema:
            type: string
            enum: [ name, price, created_at ]
            default: created_at
        - name: sort_order
          in: query
          description: Sort order.
          schema:
            type: string
            enum: [ asc, desc ]
            default: desc
        - name: page
          in: query
          description: Page number for pagination.
          schema:
            type: integer
            default: 1
            example: 1
        - name: per_page
          in: query
          description: Number of items per page.
          schema:
            type: integer
            default: 10
            example: 10
      responses:
        '200':
          description: Products retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Products retrieved successfully
                  data:
                    $ref: '#/components/schemas/PaginatedProducts'
        '500':
          description: Failed to retrieve products.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'

  /products/{id}:
    get:
      tags:
        - Products
      summary: Get a specific product
      description: Retrieve details of a specific product by its ID, including its category and reviews.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the product to retrieve.
          schema:
            type: integer # Assuming product ID is an integer
            example: 1
      responses:
        '200':
          description: Product retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Product retrieved successfully
                  data:
                    $ref: '#/components/schemas/Product'
        '404':
          description: Product not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMessage'
                example:
                  message: Product not found
        '500':
          description: Failed to retrieve product.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'

  /products/{id}/review:
    post:
      tags:
        - Products
      summary: Add or update product review
      description: Add or update a review for a specific product. Requires authentication.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the product to review.
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - rating
              properties:
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
                  example: 4
                  description: Rating from 1 to 5.
                comment:
                  type: string
                  maxLength: 500
                  nullable: true
                  example: "This product is great!"
                  description: Optional comment for the review.
      responses:
        '200':
          description: Review added or updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Review added successfully
                  data:
                    $ref: '#/components/schemas/ProductReview'
        '401':
          description: Unauthenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMessage'
                example:
                  message: Unauthenticated.
        '404':
          description: Product not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMessage'
                example:
                  message: Product not found.
        '422':
          description: Validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '500':
          description: Failed to add review.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'

  /products/{id}/favorite:
    post:
      tags:
        - Products
      summary: Toggle product favorite status
      description: Add or remove a product from the authenticated user's favorites. Requires authentication.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the product to toggle favorite status.
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Favorite status updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Product added to favorites
                  is_favorited:
                    type: boolean
                    example: true
        '401':
          description: Unauthenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMessage'
                example:
                  message: Unauthenticated.
        '404':
          description: Product not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMessage'
                example:
                  message: Product not found.
        '500':
          description: Failed to update favorite status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'

  /favorites:
    get:
      tags:
        - Products
      summary: Get user's favorite products
      description: Retrieve a paginated list of the authenticated user's favorite products. Requires authentication.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: page
          in: query
          description: Page number for pagination.
          schema:
            type: integer
            default: 1
            example: 1
        - name: per_page
          in: query
          description: Number of items per page (controller uses 10 by default for favorites).
          schema:
            type: integer
            default: 10 # As per ProductController's paginate(10)
            example: 10
      responses:
        '200':
          description: Favorites retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Favorites retrieved successfully
                  data:
                    $ref: '#/components/schemas/PaginatedProducts' # Favorites are products
        '401':
          description: Unauthenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMessage'
                example:
                  message: Unauthenticated.
        '500':
          description: Failed to retrieve favorites.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'

  /categories:
    get:
      tags:
        - Categories
      summary: List categories
      description: Retrieve a list of all product categories, including the count of products in each.
      responses:
        '200':
          description: Categories retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Categories retrieved successfully
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category' # Category schema includes products_count
        '500':
          description: Failed to retrieve categories.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'

  /categories/{id}:
    get:
      tags:
        - Categories
      summary: Get a specific category and its products
      description: Retrieve details of a specific category by its ID, and a paginated list of its associated products.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the category to retrieve.
          schema:
            type: integer # Assuming category ID is an integer
            example: 1
        - name: page
          in: query
          description: Page number for product pagination.
          schema:
            type: integer
            default: 1
            example: 1
        - name: per_page
          in: query
          description: Number of products per page.
          schema:
            type: integer
            default: 10
            example: 10
      responses:
        '200':
          description: Category and products retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Category retrieved successfully
                  category:
                    $ref: '#/components/schemas/Category' # The category object itself
                  products:
                    $ref: '#/components/schemas/PaginatedProducts' # Paginated products of this category
        '404':
          description: Category not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMessage'
                example:
                  message: Category not found
        '500':
          description: Failed to retrieve category.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'

  /cart:
    get:
      tags:
        - Cart
      summary: Get the current user's cart
      description: Retrieves the authenticated user's cart with all items and totals
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Cart retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthenticated."
        '500':
          description: Server error
          content:
            application/json:
              schema:

    delete:
      tags:
        - Cart
      summary: Clear the cart
      description: Removes all items from the authenticated user's cart
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Cart cleared successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart cleared successfully"
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthenticated."
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /cart/items:
    post:
      tags:
        - Cart
      summary: Add item to cart
      description: Add a product to the authenticated user's cart
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - product_id
                - quantity
              properties:
                product_id:
                  type: integer
                  example: 2
                quantity:
                  type: integer
                  example: 1
                  minimum: 1
      responses:
        '200':
          description: Product added to cart or quantity updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItemResponse'
        '400':
          description: Not enough product in stock
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Not enough product in stock"
                  available_stock:
                    type: integer
                    example: 5
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthenticated."
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /cart/items/{itemId}:
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: integer
          description: ID of the cart item
          example: 1
      put:
        tags:
          - Cart
        summary: Update cart item quantity
        description: Update the quantity of an item in the authenticated user's cart
        security:
          - bearerAuth: [ ]
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                required:
                  - quantity
                properties:
                  quantity:
                    type: integer
                    example: 3
                    minimum: 1
        responses:
          '200':
            description: Cart item updated successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CartItemResponse'
          '400':
            description: Not enough product in stock
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: "Not enough product in stock"
                    available_stock:
                      type: integer
                      example: 5
          '401':
            description: Unauthenticated
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: "Unauthenticated."
          '404':
            description: Cart item not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
          '422':
            description: Validation error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ValidationError'
          '500':
            description: Server error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
      delete:
        tags:
          - Cart
        summary: Remove item from cart
        description: Remove an item from the authenticated user's cart
        security:
          - bearerAuth: [ ]
        responses:
          '200':
            description: Item removed from cart successfully
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: "Item removed from cart successfully"
          '401':
            description: Unauthenticated
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: "Unauthenticated."
          '404':
            description: Cart item not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
          '500':
            description: Server error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: User's unique identifier.
        first_name:
          type: string
          example: Cristiano
        last_name:
          type: string
          nullable: true
          example: Messi
        email:
          type: string
          format: email
          example: user@gmail.com
        profile_picture:
          type: string
          format: url
          nullable: true
          example: '/storage/profile_pictures/avatar.png'
          description: URL to the user's profile picture.
        email_verified_at:
          type: string
          format: date-time
          nullable: true
          example: '2025-05-05T12:00:00.000000Z'
          description: Timestamp when the user's email was verified. Null if not verified.
        google_id:
          type: string
          nullable: true
          example: '109876543210987654321'
          description: User's Google ID if linked/registered via Google.
        created_at:
          type: string
          format: date-time
          example: '2025-05-05T10:30:00.000000Z'
        updated_at:
          type: string
          format: date-time
          example: '2025-05-05T11:00:00.000000Z'

    Product:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Fresh Broccoli"
        price:
          type: number
          format: float
          example: 3.00
        unit:
          type: string
          example: "kg"
        unit_value:
          type: number
          format: float
          example: 1.0
        image:
          type: string
          example: "products/broccoli.jpg"
        is_featured:
          type: boolean
          example: false
        is_new:
          type: boolean
          example: true
        is_organic:
          type: boolean
          example: true
        discount_percentage:
          type: integer
          example: 0
        original_price:
          type: number
          format: float
          example: 3.00
        stock:
          type: integer
          example: 100
        category_id:
          type: integer
          example: 1
        average_rating:
          type: number
          format: float
          example: 4.5
        reviews_count:
          type: integer
          example: 10

    CartItem:
      type: object
      properties:
        id:
          type: integer
          example: 1
        cart_id:
          type: integer
          example: 1
        product_id:
          type: integer
          example: 2
        quantity:
          type: integer
          example: 3
        price:
          type: number
          format: float
          example: 7.00
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        product:
          $ref: '#/components/schemas/Product'

    Cart:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 5
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'

    CartResponse:
      type: object
      properties:
        message:
          type: string
          example: "Cart retrieved successfully"
        data:
          type: object
          properties:
            cart:
              $ref: '#/components/schemas/Cart'
            subtotal:
              type: number
              format: float
              example: 56.70
            shipping_charges:
              type: number
              format: float
              example: 1.50
            total:
              type: number
              format: float
              example: 58.20

    CartItemResponse:
      type: object
      properties:
        message:
          type: string
          example: "Product added to cart"
        data:
          $ref: '#/components/schemas/CartItem'

    Category:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Fruits"
        slug:
          type: string
          example: "fruits"
        description:
          type: string
          nullable: true
          example: "All kinds of fresh fruits."
        image_url:
          type: string
          format: url
          nullable: true
          example: "/storage/categories/fruits.jpg"
          description: URL of the category image.
        products_count:
          type: integer
          example: 15
          description: "Number of products in this category. Primarily available when listing all categories."
          nullable: true
        created_at:
          type: string
          format: date-time
          example: '2025-05-01T09:00:00.000000Z'
        updated_at:
          type: string
          format: date-time
          example: '2025-05-01T09:30:00.000000Z'

    CategoryBasicInfo:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Fruits"
        slug:
          type: string
          example: "fruits"

    ProductReview:
      type: object
      properties:
        id:
          type: integer
          example: 101
        product_id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 5
        rating:
          type: integer
          minimum: 1
          maximum: 5
          example: 5
        comment:
          type: string
          nullable: true
          maxLength: 500
          example: "Great product!"
        user:
          $ref: '#/components/schemas/User'
          nullable: true
        created_at:
          type: string
          format: date-time
          example: '2025-05-07T14:20:00.000000Z'
        updated_at:
          type: string
          format: date-time
          example: '2025-05-07T14:25:00.000000Z'

    PaginationLink:
      type: object
      properties:
        url:
          type: string
          format: url
          nullable: true
          example: "http://localhost/api/products?page=1"
        label:
          type: string
          example: "&laquo; Previous"
        active:
          type: boolean
          example: false

    PaginatedResponseBase:
      type: object
      properties:
        current_page:
          type: integer
          example: 1
        first_page_url:
          type: string
          format: url
          example: "http://localhost/api/products?page=1"
        from:
          type: integer
          nullable: true
          example: 1
        last_page:
          type: integer
          example: 5
        last_page_url:
          type: string
          format: url
          example: "http://localhost/api/products?page=5"
        links:
          type: array
          items:
            $ref: '#/components/schemas/PaginationLink'
        next_page_url:
          type: string
          format: url
          nullable: true
          example: "http://localhost/api/products?page=2"
        path:
          type: string
          format: url
          example: "http://localhost/api/products"
        per_page:
          type: integer
          example: 10
        prev_page_url:
          type: string
          format: url
          nullable: true
        to:
          type: integer
          nullable: true
          example: 10
        total:
          type: integer
          example: 50

    PaginatedProducts:
      allOf:
        - $ref: '#/components/schemas/PaginatedResponseBase'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Product'

    ValidationError:
      type: object
      properties:
        message:
          type: string
          example: The given data was invalid.
        errors:
          type: object
          description: Contains validation errors for specific fields.
          additionalProperties:
            type: array
            items:
              type: string
          example:
            email:
              - The email has already been taken.
            password:
              - The password must be at least 8 characters.
              - The password confirmation does not match.
            rating:
              - The rating field is required.
            product_id:
              - The product id field is required.
            quantity:
              - The quantity must be at least 1.

    ServerError:
      type: object
      properties:
        message:
          type: string
          example: 'Internal Server Error.'
        error:
          type: string
          nullable: true
          example: 'Specific error message from the exception (may not always be present or detailed in production).'

    SimpleMessage:
      type: object
      properties:
        message:
          type: string
          example: 'Operation successful.'

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: Sanctum
      description: "Enter 'Bearer <token>' to authenticate requests for protected endpoints. Get the token from the /login endpoint."

security:
  - bearerAuth: [ ]
